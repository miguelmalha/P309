@model P309.Models.Contactos

@{
    ViewBag.Title = "Editar";
}

<h2>Editar contacto</h2>

@**
    Html.BeginForm() - Criação de um formulário para aceitar dados do utilizador. Utilização do método POST e processamento realizado pelo método de ação do controlador
    Html.LabelFor() - Label a mostrar ao utilizador que campo irá afetar
    Html.EditorFor() - Campo para o utilizador inserir o valor do campo a afetar
    ValidationMessageFor() - Retornar mensagens em caso de erro na inserção
    ActionLink()  - retorna para a ação inserida
*@

<div class="form-group error">
    @if (@ViewBag.EditarContactoPermanente != null) //Mostrar mensagem de erro caso se tente editar o contacto permanente
    {
        <label> @ViewBag.EditarContactoPermanente</label>
    }
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    if (@ViewBag.EditarContactoPermanente == null) //apenas são dados os campos do formulário se o contacto a editar não for o permanente
    {
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)

            <div class="form-group">
                @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Telefone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Notas, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Notas, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Notas, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @* Adicionada a string LabelText a LabelFor() para alterar o nome do campo  *@
                @Html.LabelFor(model => model.EmpresaNIF, "Empresa", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("EmpresaNIF", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmpresaNIF, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group"> @* Botão para salvar*@
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Salvar" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
}

<div>
    @Html.ActionLink("Voltar", "Index")
</div>
